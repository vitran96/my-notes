/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TodoHighlightPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_view = require("@codemirror/view");
var import_state = require("@codemirror/state");
var DEFAULT_SETTINGS = {
  todoColor: "#00FF00"
};
var TodoHighlightPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.injectTodoStyle();
    this.addSettingTab(new TodoHighlightSettingTab(this.app, this));
    this.registerMarkdownPostProcessor((el) => {
      const todoRx = /\bTODO\b/g;
      el.querySelectorAll("p, li").forEach((node) => {
        node.innerHTML = node.innerHTML.replace(
          todoRx,
          `<span class="cm-todo">$&</span>`
        );
      });
    });
    const todoEditorDecorator = import_view.ViewPlugin.fromClass(
      class {
        constructor(view) {
          this.decorations = this.buildDeco(view);
        }
        update(update) {
          if (update.docChanged || update.viewportChanged) {
            this.decorations = this.buildDeco(update.view);
          }
        }
        buildDeco(view) {
          const builder = new import_state.RangeSetBuilder();
          const regex = /\bTODO\b/g;
          for (const { from, to } of view.visibleRanges) {
            const text = view.state.doc.sliceString(from, to);
            let m;
            while ((m = regex.exec(text)) !== null) {
              const start = from + m.index;
              const end = start + m[0].length;
              builder.add(start, end, import_view.Decoration.mark({ class: "cm-todo" }));
            }
          }
          return builder.finish();
        }
      },
      { decorations: (v) => v.decorations }
    );
    this.registerEditorExtension([todoEditorDecorator]);
  }
  onunload() {
    this.removeTodoStyle();
  }
  // Load + save
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.injectTodoStyle();
  }
  // Inject <style id="todo-highlight-style"> into document head
  injectTodoStyle() {
    const styleId = "todo-highlight-style";
    let styleTag = document.getElementById(styleId);
    if (!styleTag) {
      styleTag = document.createElement("style");
      styleTag.id = styleId;
      document.head.appendChild(styleTag);
    }
    styleTag.textContent = `
      .cm-todo {
        color: ${this.settings.todoColor} !important;
      }
      /* also apply to preview spans just in case */
      span.cm-todo {
        color: ${this.settings.todoColor};
      }
    `;
  }
  removeTodoStyle() {
    var _a;
    (_a = document.getElementById("todo-highlight-style")) == null ? void 0 : _a.remove();
  }
};
var TodoHighlightSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "TODO Highlighter Settings" });
    new import_obsidian.Setting(containerEl).setName("TODO color").setDesc("Choose the highlight colour for your TODOs.").addColorPicker(
      (colorPicker) => colorPicker.setValue(this.plugin.settings.todoColor).onChange(async (value) => {
        this.plugin.settings.todoColor = value;
        await this.plugin.saveSettings();
      })
    );
  }
};


/* nosourcemap */